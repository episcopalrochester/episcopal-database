<?php
/**
 * @file
 * Code for the Person Data Type feature.
 */

include_once 'person.features.inc';

function person_menu() {
  $items = array();
  $items['people'] = array(
    'title' => 'People',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('person_people_form'),
    'access arguments' => array('access people listing'),
    'type' => MENU_CALLBACK,
  );
  $items['safe-training'] = array(
    'title' => 'Update Safe Training Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('person_safe_form'),
    'access arguments' => array('access people listing'),
    'type' => MENU_CALLBACK,
  );
  $items['directory'] = array(
    'title' => 'Clergy Directory',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('person_directory_form'),
    'access arguments' => array('access clergy directory'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/****************************
  Implementation of hook_theme()
****************************/

function person_theme() {
  return array(
    'directory_person' => array(
      'variables' => array('person'=>NULL),
      'template' => 'theme/directory-person',
    ),
  );
}

function person_permission() {
  return array(
    'access people listing' => array(
      'title' => t("Access People Listing"),
      'description' => t("Allow users to view listing of all people"),
    ),
    'access clergy directory' => array(
      'title' => t("Access Clergy Directory"),
      'description' => t("Allow user to access a directory of clergy"),
    ),
  );
}

function person_nodereference_options($element, $edit = FALSE) {
  $field_key  = $element['#columns'][0];
  return array($field_key => NULL);
}

function person_partners_form_submit($form, &$form_state) {
  exit;
}


function person_safe_form($form,&$form_state) {
  $form['csv'] = array(
    '#type' => 'file',
    '#title' => "Upload a CSV",
    '#tree' => TRUE,
  );
  $people = person_fetch_people("clergy");
  $form['requireall'] = array(
    '#type' => 'checkbox',
    '#tree' => true,
    '#title' => 'Set all listed people to required',
  );
  $form['people'] = array(
    '#theme' => 'table',
    '#header' => array('Title','Required','Date','edit'),
    '#rows'=> array(),
    '#tree' => true,
  );
  $expired = "";
  foreach ($people['nodes'] as $person) {
    $name = $person->field_person_last_name['und'][0]['value'].", ";
    if (isset($person->field_person_title['und']['0']['value'])) {
      $name .= $person->field_person_title['und']['0']['value']." ";
    }
    if (isset($person->field_person_first_name['und']['0']['value'])) {
      $name .=  $person->field_person_first_name['und']['0']['value']." ";
    }
    if (isset($person->field_person_middle_name['und']['0']['value'])) {
      $name .= $person->field_person_middle_name['und']['0']['value']." ";
    }
    if (isset($person->field_person_suffix['und']['0']['value'])) {
      $name .= $person->field_person_suffix['und']['0']['value']." ";
    }
    if (isset($person->field_person_email_pref['und']['0']['value'])) {
      $email = $person->field_person_email_pref['und']['0']['value'];
    }
    $required = 0;
    if (isset($person->field_person_safe_church['und'][0]['value'])) {
      $required = $person->field_person_safe_church['und'][0]['value'];
    }
    $date = "";
    if (isset($person->field_safe_church_training_date['und'][0]['value'])) {
      $date = date('m/d/Y',$person->field_safe_church_training_date['und'][0]['value']);
    }
    $style ="";
    $expiration = strtotime("1/1/".(date('Y')-5));
    if ($required == 1 && (empty($date) || strtotime($date) < $expiration)) {
      $style = "background: #ff7777; ";
      $expired .= trim($name);
      if (isset($email)) {
        $expired.=" <".$email.">";
      }
      $expired .="\n";
    }
    $name = l(rtrim($name," ,"),"node/".$person->nid);
    $edit = "";
    if (node_access("update",$person)) {
      $edit = l("edit","node/".$person->nid."/edit");
    }
    $req_field = array(
      '#name' => 'required-'.$person->nid,
      '#type' => 'checkbox',
      '#tree' => true,
    );
    if ($required) {
      $req_field['#attributes']['checked'] = TRUE;
    }
    $date_field = array(
      '#name' => 'safedate-'.$person->nid,
      '#type'=> 'textfield',
      '#value' => $date,
      '#tree' => true,
    );
    $row = array(
      'Title' => $name,
      array('data'=>&$req_field),
      array('data'=>&$date_field),
      'edit' => $edit,
    );
    $form['people']['#rows'][] = array('data'=>$row,'style'=>$style);
    unset($req_field);
    unset($date_field);
    unset($email);
  }
  $form['expired'] = array(
    '#type'=>'textarea',
    '#value'=>$expired,
    '#title'=>'People with expired training',
    '#weight'=>-10,
  );
  $form['submit'] = array(

    '#type' => 'submit',
    '#value' => 'Save Changes / Process CSV',
  );
   $form['#submit'] = array('person_safe_form_submit');
  return $form;
}

function person_safe_form_submit($form, &$form_state) {
  $people = person_fetch_people();
  foreach ($people['nodes'] as $person) {
    if (isset($form_state['input']['requireall'])) {
      $person->field_person_safe_church['und'] = array('0' => array('value' => 1));  
    }
    elseif (isset($form_state['input']['required-'.$person->nid])) {
      $person->field_person_safe_church['und'] = array('0' => array('value' => $form_state['input']['required-'.$person->nid]));
    }
    else {
      $person->field_person_safe_church['und'] = array('0' => array('value' => 0));
    }
    if (isset($form_state['input']['safedate-'.$person->nid]) && !empty($form_state['input']['safedate-'.$person->nid])) {
      $person->field_safe_church_training_date['und'] = array('0' => array('value' => strtotime($form_state['input']['safedate-'.$person->nid])));
    }
    else {
      unset($person->field_safe_church_training_date['und'][0]);
    }
    node_save($person);
  }
  $file = file_save_upload('csv',array(
    'file_validate_extensions' => array('csv'),FILE_EXISTS_REPLACE));
  if (!$file) {
    return;
  }
  $csv = explode("\n",str_replace("\r","\n",file_get_contents(drupal_realpath($file->destination)))); 
  $header = str_getcsv($csv[0]);
  unset($csv[0]);
  $key = array();
  $key['name'] = array_shift(array_values(array_keys($header,"name")));
  $key['email'] = array_shift(array_values(array_keys($header,"email")));
  $key['date'] = array_shift(array_values(array_keys($header,"date")));
  if (is_null($key['name']) || is_null($key['email']) || is_null($key['date'])) {
    return false;
  }
  foreach ($csv as $row) {
    $data = str_getcsv($row);
    $count = 0;
    if (isset($data[$key['date']]) && !empty($data[$key['date']]) && $data[$key['name']]) {
      $date = trim($data[$key['date']]);
      $name = trim($data[$key['name']]);
      if (isset($data[$key['email']])) {
        $email = trim($data[$key['email']]);
      }
      else {
        $email = false;
      }
      $person = person_find_person($name,$email);
      if ($person) {
        if (strlen($date) == "4") {
          $date = "12/31/".$date;
        }
        $date = strtotime($date);
        $lang = $person->language; 
        $person->field_safe_church_training_date = array(
          $lang => array('0' => array('value' => $date)),
        );
        node_save($person);
      }
      else {
        drupal_set_message("Could not find ".$name.". Please update by hand.","error");
      }
    }
  }
  $form_state['rebuild'] = TRUE;  
}

function person_find_person($name,$email=FALSE) {
  $name_query = new EntityFieldQuery();
  $name_result = $name_query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'person')
    ->propertyCondition('title', "%".$name."%","LIKE")
    ->propertyCondition('status', 1)
    ->range(0,1)
    ->execute();
  if (isset($name_result['node'])) {
    $name_nid = array_shift(array_values($name_result['node']))->nid;
  }
  if (isset($name_nid)) {
    return node_load($name_nid);
  }
  if ($email) {
    $email_query = new EntityFieldQuery();
    $email_result = $email_query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'person')
      ->fieldCondition('field_person_email_pref','value',$email)
      ->propertyCondition('status', 1)
      ->range(0,1)
      ->execute();
    if (isset($email_result['node'])) {
      $email_nid = array_shift(array_values($email_result['node']))->nid;
    }
  }
  if (isset($email_nid)) {
    return node_load($email_nid);
  }
  return false;
}

function person_directory_form($form,&$form_state,$type="all",$last="",$first="",$status="living") {
  if (isset($form_state['values']['last'])) {
    $last = $form_state['values']['last'];
  }
  if (isset($form_state['values']['first'])) {
    $first = $form_state['values']['first'];
  }
  $people = person_fetch_people('clergy',$last,$first,$status);
  $weight = 1000;
  foreach ($people['nodes'] as $person) {
    $form['person'.$person->nid] = array(
      '#type'=>'markup',
      '#markup'=>theme('directory_person',array('person'=>$person)),
      '#weight'=>$weight,
    );
    $weight++;
  }
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => 'Filters',
  );
  $form['filters']['last'] = array(
    '#type' => 'textfield',
    '#default_value' => $last,
    '#title' => "Last Name",
  );
  $form['filters']['first'] = array(
    '#type' => 'textfield',
    '#default_value' => $first,
    '#title' => "First Name",
  );
  $form['filters']['submit'] = array(

    '#type' => 'submit',
    '#value' => 'Search',
  );
 $form['filters']['print'] = array(
    '#type' => 'button',
      '#executes_submit_callback' => FALSE,
    '#button_type' => 'button',
    '#value' => 'Print',
     '#theme_wrappers' => array('button'),
    '#attributes' => array(
      'onclick' => 'window.print(); return false;',
      'type' => 'button',
      ),
    );

  $form['#submit'] = array('person_directory_form_submit');
  return $form;
}

function person_directory_form_submit($form, &$form_state) {
  if (isset($form_state['values']['type'])) {
    $form_state['values']['type'] = $form_state['values']['type'];
  }
  if (isset($form_state['values']['last'])) {
    $form_state['values']['last'] = $form_state['values']['last'];
  }
  if (isset($form_state['values']['first'])) {
    $form_state['values']['first'] = $form_state['values']['first'];
  }
  $form_state['rebuild'] = TRUE;  
}

function person_people_form($form,&$form_state,$type="all",$last="",$first="",$status="living") {
  if (isset($form_state['values']['type'])) {
    $type = $form_state['values']['type'];
  }
  if (isset($form_state['values']['last'])) {
    $last = $form_state['values']['last'];
  }
  if (isset($form_state['values']['first'])) {
    $first = $form_state['values']['first'];
  }
  if (isset($form_state['values']['status'])) {
    $status = $form_state['values']['status'];
  }
  $people = person_fetch_people($type,$last,$first,$status,20);
  $people_table = array(
    'header' => array('Name','Location','E-Mail','Phone','edit'),
    'rows' => array(),
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => FALSE,
    'empty' => '',
  );
  foreach ($people['nodes'] as $person) {
    $name = $person->field_person_last_name['und'][0]['value'].", ";
    if (isset($person->field_person_title['und']['0']['value'])) {
      $name .= $person->field_person_title['und']['0']['value']." ";
    }
    if (isset($person->field_person_first_name['und']['0']['value'])) {
      $name .=  $person->field_person_first_name['und']['0']['value']." ";
    }
    if (isset($person->field_person_middle_name['und']['0']['value'])) {
      $name .= $person->field_person_middle_name['und']['0']['value']." ";
    }
    if (isset($person->field_person_suffix['und']['0']['value'])) {
      $name .= $person->field_person_suffix['und']['0']['value']." ";
    }
    $name = l(rtrim($name," ,"),"node/".$person->nid);
    $location = "";
    if (isset($person->field_person_home_city['und']['0']['value'])) {
      $location .= $person->field_person_home_city['und']['0']['value'].", ";
    }
    if (isset($person->field_person_home_state['und']['0']['value'])) {
      $location .= $person->field_person_home_state['und']['0']['value'];
    }
    if (isset($person->field_person_home_other['und']['0']['value'])) {
      $location .= $person->field_person_home_other['und']['0']['value'];
    }
    $email = "";
    if (isset($person->field_person_email_pref['und']['0']['value'])) {
      $email .= $person->field_person_email_pref['und']['0']['value'];
      $email = l($email,"mailto:".$email);
    }
    $phone = "";
    if (isset($person->field_person_phone_pref['und']['0']['value'])) {
      $phone .= $person->field_person_phone_pref['und']['0']['value'];
    }
    $edit = "";
    if (node_access("update",$person)) {
      $edit = l("edit","node/".$person->nid."/edit");
    }
    $row = array(
      'title' => $name,
      'Location' => $location,
      'E-Mail' => $email,
      'Phone' => $phone,
      'edit' => $edit,
    );
    $people_table['rows'][] = $row;
  }
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => 'Filters',
  );
  $form['filters']['type'] = array(
    '#type' => 'select',
    '#title' => 'Listing Type',
    '#options' => array(
      'all' => 'All',
      'clergy' => 'Clergy',
      'laity' => 'Laity',
    ),
    '#default_value' => $type,
  );
  $form['filters']['last'] = array(
    '#type' => 'textfield',
    '#default_value' => $last,
    '#title' => "Last Name",
  );
  $form['filters']['first'] = array(
    '#type' => 'textfield',
    '#default_value' => $first,
    '#title' => "First Name",
  );
  $form['filters']['status'] = array(
    '#type' => 'select',
    '#default_value' => $status,
    '#title' => "Status",
    '#options' => array('living'=>'Living','deceased'=>'Deceased'),
  );
  $form['filters']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
  );
  $form['people'] = array(
    '#type' => 'item',
    '#markup' => theme_table($people_table)
  );
  $form['pager'] = array(
    '#type' => 'item',
    '#markup' => theme('pager', array('tags' => array())),
  );
  $form['#submit'] = array('person_people_form_submit');
  return $form;
}

function person_people_form_submit($form, &$form_state) {
  if (isset($form_state['values']['type'])) {
    $form_state['values']['type'] = $form_state['values']['type'];
  }
  if (isset($form_state['values']['last'])) {
    $form_state['values']['last'] = $form_state['values']['last'];
  }
  if (isset($form_state['values']['first'])) {
    $form_state['values']['first'] = $form_state['values']['first'];
  }
  $form_state['rebuild'] = TRUE;  
}

function person_fetch_people($type="all",$last="",$first="",$status="living",$limit=FALSE) {
  $query = db_select("node","n");
  $query->leftJoin("field_data_field_person_last_name","l","l.entity_id = n.nid");
  $query->leftJoin("field_data_field_person_first_name","f","f.entity_id = n.nid");
  $query->leftJoin("field_data_field_person_priesthood","p","p.entity_id = n.nid");
  $query->leftJoin("field_data_field_person_diaconate","d","d.entity_id = n.nid");
  $query->leftJoin("field_data_field_person_consecration","c","c.entity_id = n.nid");
  $query->leftJoin("field_data_field_person_dod","m","m.entity_id = n.nid");
  $query->fields('n',array('nid'))
    ->condition("n.type","person","=")
    ->orderBy('l.field_person_last_name_value','ASC')
    ->orderBy('f.field_person_first_name_value','ASC')
    ->condition('n.status', 1);
  if (!empty($last)) {
    $query->condition('l.field_person_last_name_value',"%".check_plain($last)."%",'LIKE');
  }
  if (!empty($first)) {
    $query->condition('f.field_person_first_name_value',"%".check_plain($first)."%",'LIKE');
  }
  if ($status == "deceased") {
    $query->isNotNull('m.field_person_dod_value');
  }
  else {
    $query->isNull('m.field_person_dod_value');
  }
  if ($type == "clergy") {
    $is_clergy = db_or()
      ->isNotNull('p.field_person_priesthood_value')
      ->isNotNull('d.field_person_diaconate_value')
      ->isNotNull('c.field_person_consecration_value');
    $query->condition($is_clergy);
  }
  if ($type == "laity") {
    $query->isNull('p.field_person_priesthood_value')
      ->isNull('d.field_person_diaconate_value')
      ->isNull('c.field_person_consecration_value');
  }
  if ($limit) {
$query = $query->extend('PagerDefault')->limit($limit);
  }
  $result = $query->execute();
  $people = array('nodes' => array(), 'pager' => '');
  while ($record = $result->fetchAssoc()) {
    $people['nodes'][] = node_load($record['nid']);
  }
  return $people;
}

function person_is_alive($person) {
  if (field_get_items('node',$person,'field_person_dod')) {
    return false;
  }
  return true; 
}

function person_get_full_name($person) {
  $first = field_get_items('node',$person,'field_person_first_name');
  $middle = field_get_items('node',$person,'field_person_middle_name');
  if (!isset($middle[0]['value'])) {
   $middle[0]['value'] = "";
  }
  $nick = field_get_items('node',$person,'field_person_nickname');
  if (isset($nick[0]['value'])) {
    $first[0]['value'] = "";
    $middle[0]['value'] = "";
  }
  else {
    $nick[0]['value'] = "";
  }
  $last = field_get_items('node',$person,'field_person_last_name');
  return trim(preg_replace('!\s+!', ' ', implode(" ",array(
    $nick[0]['value'],
    $first[0]['value'],
    $middle[0]['value'],
    $last[0]['value'],
  ))));
}

function person_get_address($person,$type) {
  $pfx = "field_person_".$type."_";
  $address = array(
    'line1' => _get_value($person,$pfx."1"),
    'line2' => _get_value($person,$pfx."2"),
    'city' => _get_value($person,$pfx."city"),
    'state' => _get_value($person,$pfx."state"),
    'other' => _get_value($person,$pfx."other"),
    'postal' => _get_value($person,$pfx."postal"),
  );
  return $address;
}

function person_get_phone($person,$type) {
  $pfx = "field_person_phone_".$type;
  $phone = array(
    'number' => _get_value($person,$pfx),
    'type' => _get_value($person,$pfx."_type"),
  );
  return $phone;
}

function person_get_email($person,$type) {
  $pfx = "field_person_email_".$type;
  $email = array(
    'addy' => _get_value($person,$pfx),
    'type' => _get_value($person,$pfx."_type"),
  );
  return $email;
}

function _get_value($node,$field,$type = "value") {
  $array = field_get_items('node',$node,$field);
  return $array[0][$type];
}

function person_node_load($nodes, $types) {
  if (in_array("person",$types)) {
    foreach ($nodes as $key => $node) {
      $nodes[$key]->title = person_get_full_name($node);
    }
  }
}

function person_node_view($node, $view_mode, $langcode) {
  $admin = edb_is_admin();
if (node_access("update",$node)) {
    drupal_goto("node/".$node->nid."/edit");
}
  if ($node->type == "person") {
    $count = 1;
    if ($admin) {
    $partnerships = find_relationships(array_filter(array_keys(partnership_types())),$node,TRUE);
    }
    else {
    $partnerships = find_relationships(array_filter(array_keys(partnership_types())),$node,FALSE);
    }
    foreach ($partnerships as $partnership) {
      $pr_node = $partnership['node'];
      $lang = $pr_node->language;
      $nid = $pr_node->nid;
      $node->content['#group_children']['field_pr_head_'.$nid] = "group_personal_relationships";
      $node->content['#group_children']['field_pr_partnership_'.$nid] = "group_personal_relationships";
      $node->content['#group_children']['field_pr_start_'.$nid] = "group_personal_relationships";
      $node->content['#group_children']['field_pr_end_'.$nid] = "group_personal_relationships";
      $node->content['#group_children']['field_pr_end_reason_'.$nid] = "group_personal_relationships";
      if ($partnership['relative']) {
        $partner = person_get_full_name($partnership['relative']);
      }
      elseif(isset($pr_node->field_person_2_nr[$lang][0]['value'])) {
        $partner = $pr_node->field_person_2_nr[$lang][0]['value'];
      }
      else {
        $partner = "No record entered for partner/spouse";
      }
      $title = "Partnership";
      if (!$partnership['active']) {
        $title .= " (inactive)";
      }
      if (node_access("update",$pr_node)) {
        $title .= " - ".l("edit","node/".$pr_node->nid."/edit");
      }
      $node->content['field_pr_head_'.$nid] = array(
        '#theme' => 'field',
        '#label_display' => 'hidden',
        '#field_name' => 'field_pr_head',
        '#field_type' => 'textfield',
        '#view_mode' => 'full',
        '#bundle' => 'person',
        '#items' => array(0 => array('value'=>"Partnership")),
        '#formatter' => 'text_default',
        0 => array('#markup' => "<h2>".$title."</h2>"),
      );
      $node->content['field_pr_partnership_'.$nid] = array(
        '#theme' => 'field',
        '#label_display' => 'inline',
        '#field_name' => 'field_pr_partnership',
        '#field_type' => 'textfield',
        '#view_mode' => 'full',
        '#title' => ucwords($partnership['type']),
        '#bundle' => 'person',
        '#items' => array(0 => array('value'=>$partner)),
        '#formatter' => 'text_default',
        0 => array('#markup' => $partner),
      );
      if ($partnership['start']) {
        $node->content['field_pr_start_'.$nid] = array(
          '#theme' => 'field',
          '#label_display' => 'inline',
          '#field_name' => 'field_pr_start_'.$nid,
          '#field_type' => 'textfield',
          '#view_mode' => 'full',
          '#title' => "Start Date",
          '#bundle' => 'person',
          '#items' => array(0 => array('value'=>$partnership['start'])),
          '#formatter' => 'text_default',
          0 => array('#markup' => $partnership['start']),
        );
      }
      if ($partnership['end']) {
        $node->content['field_pr_end_'.$nid] = array(
          '#theme' => 'field',
          '#label_display' => 'inline',
          '#field_name' => 'field_pr_end_'.$nid,
          '#field_type' => 'textfield',
          '#view_mode' => 'full',
          '#title' => "End Date",
          '#bundle' => 'person',
          '#items' => array(0 => array('value'=>$partnership['end'])),
          '#formatter' => 'text_default',
          0 => array('#markup' =>$partnership['end']),
        );
      }
      if ($partnership['end_reason']) {
        $node->content['field_pr_end_reason_'.$nid] = array(
          '#theme' => 'field',
          '#label_display' => 'inline',
          '#field_name' => 'field_pr_end_reason_'.$nid,
          '#field_type' => 'textfield',
          '#view_mode' => 'full',
          '#title' => "Reason for End",
          '#bundle' => 'person',
          '#items' => array(0 => array('value'=>$partnership['end_reason'])),
          '#formatter' => 'text_default',
          0 => array('#markup' =>partnership_splits($partnership['end_reason'])),
        );
      }
    }
    $count = 1;
    if ($admin) {
    $jobs = find_pro_relationships(array_filter(array_keys(pro_relationship_types())),$node,TRUE);
    }
    else {
    $jobs = find_pro_relationships(array_filter(array_keys(pro_relationship_types())),$node,FALSE);
    }
    foreach ($jobs as $job) {
      $pf_node = $job['node'];
      $lang = $pf_node->language;
      $nid = $pf_node->nid;
      $node->content['#group_children']['field_pf_head_'.$nid] = "group_professional_relationships";
      $node->content['#group_children']['field_pf_job_'.$nid] = "group_professional_relationships";
      $node->content['#group_children']['field_pf_start_'.$nid] = "group_professional_relationships";
      $node->content['#group_children']['field_pf_end_'.$nid] = "group_professional_relationships";
      $node->content['#group_children']['field_pf_end_reason_'.$nid] = "group_professional_relationships";
      if ($job['relative']) {
        $job_title = $job['relative']->title;
      }
      elseif(isset($pf_node->field_org_nr[$lang][0]['value'])) {
        $job_title = $pf_node->field_org_nr[$lang][0]['value'];
      }
      else {
        $job_title = "No record entered for employer";
      }
      $title = "Job";
      if (!$job['active']) {
        $title .= " (inactive)";
      }
      if (node_access("update",$pf_node)) {
        $title .= " - ".l("edit","node/".$pf_node->nid."/edit");
      }
      $node->content['field_pf_head_'.$nid] = array(
        '#theme' => 'field',
        '#label_display' => 'hidden',
        '#field_name' => 'field_pf_head',
        '#field_type' => 'textfield',
        '#view_mode' => 'full',
        '#bundle' => 'person',
        '#items' => array(0 => array('value'=>"Partnership")),
        '#formatter' => 'text_default',
        0 => array('#markup' => "<h2>".$title."</h2>"),
      );
      $types = pro_relationship_types();
      $node->content['field_pf_job_'.$nid] = array(
        '#theme' => 'field',
        '#label_display' => 'inline',
        '#field_name' => 'field_pf_job',
        '#field_type' => 'textfield',
        '#view_mode' => 'full',
        '#title' => $types[$job['type']],
        '#bundle' => 'person',
        '#items' => array(0 => array('value'=>$job_title)),
        '#formatter' => 'text_default',
        0 => array('#markup' => $job_title),
      );
      if ($job['start']) {
        $node->content['field_pf_start_'.$nid] = array(
          '#theme' => 'field',
          '#label_display' => 'inline',
          '#field_name' => 'field_pf_start_'.$nid,
          '#field_type' => 'textfield',
          '#view_mode' => 'full',
          '#title' => "Start Date",
          '#bundle' => 'person',
          '#items' => array(0 => array('value'=>$job['start'])),
          '#formatter' => 'text_default',
          0 => array('#markup' => $job['start']),
        );
      }
      if ($job['end']) {
        $node->content['field_pf_end_'.$nid] = array(
          '#theme' => 'field',
          '#label_display' => 'inline',
          '#field_name' => 'field_pf_end_'.$nid,
          '#field_type' => 'textfield',
          '#view_mode' => 'full',
          '#title' => "End Date",
          '#bundle' => 'person',
          '#items' => array(0 => array('value'=>$job['end'])),
          '#formatter' => 'text_default',
          0 => array('#markup' =>$job['end']),
        );
      }
      if ($job['end_reason']) {
        $node->content['field_pf_end_reason_'.$nid] = array(
          '#theme' => 'field',
          '#label_display' => 'inline',
          '#field_name' => 'field_pf_end_reason_'.$nid,
          '#field_type' => 'textfield',
          '#view_mode' => 'full',
          '#title' => "Reason for End",
          '#bundle' => 'person',
          '#items' => array(0 => array('value'=>$job['end_reason'])),
          '#formatter' => 'text_default',
          0 => array('#markup' =>pro_relationship_splits($job['end_reason'])),
        );
      }
    }
  }
}

function person_form_person_node_form_alter(&$form, &$form_state, $form_id) {
  $admin = edb_is_admin();
  if (isset($form['#node']->nid)) {
    if ($admin) {
      $partnerships = find_relationships(array_filter(array_keys(partnership_types())),$form['#node'],TRUE);
    }
    else {
      $partnerships = find_relationships(array_filter(array_keys(partnership_types())),$form['#node'],FALSE);
    }
    $count = 1;
    foreach ($partnerships as $partnership) {
      $pr_node = $partnership['node'];
      $lang = $pr_node->language;
      $nid = $pr_node->nid;
      $form['#group_children']['field_pr_head_'.$nid] = "group_personal_relationships";
      $form['#group_children']['field_pr_partnership_'.$nid] = "group_personal_relationships";
      $form['#group_children']['field_pr_type_'.$nid] = "group_personal_relationships";
      $form['#group_children']['field_pr_start_'.$nid] = "group_personal_relationships";
      $form['#group_children']['field_pr_end_'.$nid] = "group_personal_relationships";
      $form['#group_children']['field_pr_end_reason_'.$nid] = "group_personal_relationships";
if ($partnership['relative']) {
        $partner = person_get_full_name($partnership['relative']);
      }
    elseif(isset($pr_node->field_person_2_nr[$lang][0]['value'])) {
        $partner = $pr_node->field_person_2_nr[$lang][0]['value'];
      }
      else {
        $partner = "No record entered for partner/spouse";
      }
      $title = "Partnership";
      if (node_access("update",$pr_node)) {
        $title .= " - ".l("edit","node/".$pr_node->nid."/edit");
      }
      if (!$partnership['active']) {
        $title .= " (inactive)";
      }
      $form['field_pr_head_'.$nid] = array(
        '#type' => 'markup',
        '#markup' => '<h2>'.$title.'</h2>',
        );
      $form['field_pr_partnership_'.$nid] = array(
        '#type'=> 'item',
        '#title' => 'Partner:',
        '#markup'=>$partner,
      );
      $form['field_pr_type_'.$nid] = array(
        '#type'=> 'select',
        '#title' => 'Partnership Type:',
        '#options' => partnership_types(),
        '#default_value' => $partnership['type'],
      );
      $form['field_pr_start_'.$nid] = array(
        '#type'=> 'textfield',
        '#title' => 'Partnership Start Date:',
        '#description' => 'Format: '.date('m/d/Y'),
        '#default_value' => $partnership['start'],
      );
      $form['field_pr_end_'.$nid] = array(
        '#type'=> 'textfield',
        '#title' => 'Partnership End Date:',
        '#description' => 'Format: '.date('m/d/Y'),
        '#default_value' => $partnership['end'],
      );
      $form['field_pr_end_reason_'.$nid] = array(
        '#type'=> 'select',
        '#title' => 'Partnership End Reason:',
        '#options' => partnership_splits(),
        '#default_value' => $partnership['end_reason'],
      );
      $count++;
    }
    if ($admin) {
    $jobs = find_pro_relationships(array_filter(array_keys(pro_relationship_types())),$form['#node'],TRUE);
    }
    else {
    $jobs = find_pro_relationships(array_filter(array_keys(pro_relationship_types())),$form['#node'],FALSE);
    }
    $count = 1;
    foreach ($jobs as $job) {
      $pf_node = $job['node'];
      $lang = $pf_node->language;
      $nid = $pf_node->nid;
      $form['#group_children']['field_pf_head_'.$nid] = "group_professional_relationships";
      $form['#group_children']['field_pf_job_'.$nid] = "group_professional_relationships";
      $form['#group_children']['field_pf_type_'.$nid] = "group_professional_relationships";
      $form['#group_children']['field_pf_start_'.$nid] = "group_professional_relationships";
      $form['#group_children']['field_pf_end_'.$nid] = "group_professional_relationships";
      $form['#group_children']['field_pf_end_reason_'.$nid] = "group_professional_relationships";
if ($job['relative']) {
        $job_title = $job['relative']->title;
      }
    elseif(isset($pf_node->field_org_nr[$lang][0]['value'])) {
        $job_title = $pf_node->field_org_nr[$lang][0]['value'];
      }
      else {
        $job_title = "No record entered for job";
      }
      $title = "Job";
      if (node_access("update",$pf_node)) {
        $title .= " - ".l("edit","node/".$pf_node->nid."/edit");
      }
      if (!$job['active']) {
        $title .= " (inactive)";
      }
      $form['field_pf_head_'.$nid] = array(
        '#type' => 'markup',
        '#markup' => '<h2>'.$title.'</h2>',
        );
      $form['field_pf_job_'.$nid] = array(
        '#type'=> 'item',
        '#title' => 'Employer:',
        '#markup'=>$job_title,
      );
      $form['field_pf_type_'.$nid] = array(
        '#type'=> 'select',
        '#title' => 'Job Type:',
        '#options' => pro_relationship_types(),
        '#default_value' => $job['type'],
      );
      $form['field_pf_start_'.$nid] = array(
        '#type'=> 'textfield',
        '#title' => 'Job Start Date:',
        '#description' => 'Format: '.date('m/d/Y'),
        '#default_value' => $job['start'],
      );
      $form['field_pf_end_'.$nid] = array(
        '#type'=> 'textfield',
        '#title' => 'Job End Date:',
        '#description' => 'Format: '.date('m/d/Y'),
        '#default_value' => $job['end'],
      );
      $form['field_pf_end_reason_'.$nid] = array(
        '#type'=> 'select',
        '#title' => 'Job End Reason:',
        '#options' => pro_relationship_splits(),
        '#default_value' => $job['end_reason'],
      );
      $count++;
    }

  }
}

function person_node_update($node) {
  if ($node->type == "person" && isset($node->nid)) {
    $node->title = person_get_full_name($node);
    $partnerships = find_relationships(array_filter(array_keys(partnership_types())),$node,TRUE);
    foreach ($partnerships as $partnership) {
      $pr_node = $partnership['node'];
      $nid = $pr_node->nid;
      $lang = $pr_node->language;
      eval("\$editing = isset(\$node->field_pr_type_".$nid.");");
      if ($editing) {
        eval("\$pr_node->field_pr_type[\$lang][0]['value']=\$node->field_pr_type_".$nid.";");
        eval("\$pr_node->field_pr_start[\$lang][0]['value'] = _date_to_utc(\$node->field_pr_start_".$nid.");");
        if (empty($pr_node->field_pr_start[$lang][0]['value'])) {
          $pr_node->field_pr_start = NULL;
        }
        eval("\$pr_node->field_pr_end[\$lang][0]['value'] = _date_to_utc(\$node->field_pr_end_".$nid.");");
        if (empty($pr_node->field_pr_end[$lang][0]['value'])) {
          $pr_node->field_pr_end = NULL;
        } 
        eval("\$pr_node->field_pr_end_reason[\$lang][0]['value']=\$node->field_pr_end_reason_".$nid.";");
        if (empty($pr_node->field_pr_end_reason[$lang][0]['value'])) {
          $pr_node->field_pr_end_reason = NULL;
        }
        node_save($pr_node);
      }
    }
    $jobs = find_pro_relationships(array_filter(array_keys(pro_relationship_types())),$node,TRUE);
    foreach ($jobs as $job) {
      $pf_node = $job['node'];
      $nid = $pf_node->nid;
      $lang = $pf_node->language;
      eval("\$editing = isset(\$node->field_pf_type_".$nid.");");
      if ($editing) {
        eval("\$pf_node->field_pf_type[\$lang][0]['value']=\$node->field_pf_type_".$nid.";");
        eval("\$pf_node->field_pf_start[\$lang][0]['value'] = _date_to_utc(\$node->field_pf_start_".$nid.");");
        if (empty($pf_node->field_pf_start[$lang][0]['value'])) {
          $pf_node->field_pf_start = NULL;
        }
        eval("\$pf_node->field_pf_end[\$lang][0]['value'] = _date_to_utc(\$node->field_pf_end_".$nid.");");
        if (empty($pf_node->field_pf_end[$lang][0]['value'])) {
          $pf_node->field_pf_end = NULL;
        } 
        eval("\$pf_node->field_pf_end_reason[\$lang][0]['value']=\$node->field_pf_end_reason_".$nid.";");
        if (empty($pf_node->field_pf_end_reason[$lang][0]['value'])) {
          $pf_node->field_pf_end_reason = NULL;
        }
        node_save($pf_node);
      }
    }
  }
}

function _date_to_utc($date) {
  if (empty($date)) {
    return "";
  }
  $object = new DateTime($date);
  return date_format($object,'Y-m-d\T00:00:00');
}

function _date_to_human($date) {
  if (empty($date)) {
    return "";
  }
  $object = new DateTime($date);
  return date_format($object,'m/d/Y');
}


