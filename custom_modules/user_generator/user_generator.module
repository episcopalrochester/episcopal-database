<?php

function user_generator_run() { 
  if (module_exists("rules")) {
    module_disable(array("rules","rules_admin"));
  }
  $persons = user_generator_scan_persons();
  $emails = array();
  $rid = user_role_load_by_name('database user')->rid;
  foreach ($persons as $person) {
    $email_field = field_get_items('node',$person,'field_person_email_pref');
    if ($email_field) {
      $email = trim(strtolower($email_field[0]['value']));
      if(!user_generator_check_mail($email) && (!empty($email))) {
        user_generator_create_account($email,$person,$rid);
      }
      $uid = user_generator_check_mail($email);
      if ($uid && $person->uid <> $uid) {
        $person->uid = $uid;
        node_save($person);
      }
    }
  }
  module_enable(array("rules","rules_admin"));
}

function user_generator_scan_clergy() {
  $persons = user_generator_scan_persons();
  $rid = user_role_load_by_name('clergy')->rid;
  foreach ($persons as $person) {
    $is_clergy = person_is_clergy($person);
    $email_field = field_get_items('node',$person,'field_person_email_pref');
    if ($email_field) {
      $email = trim(strtolower($email_field[0]['value']));
      if($uid = user_generator_check_mail($email)) {
        $account = user_load($uid);
        if ($is_clergy) {
          $account->roles[$rid] = true;
          user_save($account);
        }
      }
    }
  }
}

function user_generator_scan_deans() {
  $persons = user_generator_scan_persons();
  $rid = user_role_load_by_name('dean')->rid;
  foreach ($persons as $person) {
    $is_dean = person_is_dean($person);
    $email_field = field_get_items('node',$person,'field_person_email_pref');
    if ($email_field) {
      $email = trim(strtolower($email_field[0]['value']));
      if($uid = user_generator_check_mail($email)) {
        $account = user_load($uid);
        if ($is_dean) {
          $account->roles[$rid] = true;
          user_save($account);
        }
        elseif (isset($account->roles[$rid])) {
          unset( $account->roles[$rid]);
          user_save($account);
        }
      }
    }
  }
}

function user_generator_scan_wardens() {
  $persons = user_generator_scan_persons();
  $rid = user_role_load_by_name('warden')->rid;
  foreach ($persons as $person) {
    $is_warden = person_is_warden($person);
    $email_field = field_get_items('node',$person,'field_person_email_pref');
    if ($email_field) {
      $email = trim(strtolower($email_field[0]['value']));
      if($uid = user_generator_check_mail($email)) {
        $account = user_load($uid);
        if ($is_warden) {
          $account->roles[$rid] = true;
          user_save($account);
        }
        elseif (isset($account->roles[$rid])) {
          unset( $account->roles[$rid]);
          user_save($account);
        }
      }
    }
  }
}

function user_generator_scan_leaders() {
  $persons = user_generator_scan_persons();
  $rid = user_role_load_by_name('leadership')->rid;
  foreach ($persons as $person) {
    $is_leader = person_is_leader($person);
    var_dump($person->title);
    $email_field = field_get_items('node',$person,'field_person_email_pref');
    if ($email_field) {
      $email = trim(strtolower($email_field[0]['value']));
      if($uid = user_generator_check_mail($email)) {
        $account = user_load($uid);
        if ($is_leader) {
          $account->roles[$rid] = true;
          user_save($account);
        }
        elseif (isset($account->roles[$rid])) {
          unset( $account->roles[$rid]);
          user_save($account);
        }
      }
    }
  }
}

function user_generator_scan_admins() {
  $persons = user_generator_scan_persons();
  $rid = user_role_load_by_name('parish administrator')->rid;
  foreach ($persons as $person) {
    $is_admin = person_is_admin($person);
    $email_field = field_get_items('node',$person,'field_person_email_pref');
    if ($email_field) {
      $email = trim(strtolower($email_field[0]['value']));
      if($uid = user_generator_check_mail($email)) {
        $account = user_load($uid);
        if ($is_admin) {
          $account->roles[$rid] = true;
          user_save($account);
        }
        elseif (isset($account->roles[$rid])) {
          unset( $account->roles[$rid]);
          user_save($account);
        }
      }
    }
  }
}

function user_generator_cron() {
  var_dump("test");
  user_generator_run();
  user_generator_scan_admins();
  user_generator_scan_wardens();
  user_generator_scan_deans();
  user_generator_scan_clergy();
  user_generator_scan_leaders();
}

function user_generator_flush_users() {
  $result = db_select('users','u')
    ->fields("u",array('uid'))
    ->condition('init','user_generator','=')
    ->execute();
  while($record = $result->fetchAssoc()) {
    $update = db_update('node')
      ->fields(array('uid'=>0))
      ->condition('uid',$record['uid'],'=')
      ->execute();
    user_delete($record['uid']);
  }
}

function user_generator_create_account($email,$person,$rid) {
  if (person_is_alive($person)) {
    $name = person_get_full_name($person);
    if (user_generator_check_name($name)) {
      $name = $email;
    }
    $account->name = $name;
    $account->mail = $email;
    $account->init = "user_generator";
    $account->status = 1;
    $roles = array($rid => TRUE);
    $account->roles = $roles;
    $edit = array('pass'=>$email);
    user_save($account,$edit);
  }
}

function user_generator_check_mail($email) {
  $uid = db_select('users','u')
    ->fields("u",array('uid'))
    ->condition('mail',$email,"=")
    ->execute()
    ->fetchField();
  return $uid;
}

function user_generator_check_name($name) {
  $uid = db_select('users','u')
    ->fields("u",array('name'))
    ->condition('name',$name,"=")
    ->execute()
    ->fetchField();
  return $uid;
}

function user_generator_scan_persons() {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'person')
    ->propertyCondition('status', 1)
    ->execute();
  if ($entities['node']) {
    $nodes = entity_load('node', array_keys($entities['node']));
    return $nodes;
  }
  return array();
}

function fix_names() {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'person')
    ->propertyCondition('status', 1)
    ->execute();
  if ($entities['node']) {
    $nodes = entity_load('node', array_keys($entities['node']));
  }
  foreach ($nodes as $node) {
    $node->title = person_get_full_name($node);
    var_dump($node->title);
    node_save($node);
  }
}
