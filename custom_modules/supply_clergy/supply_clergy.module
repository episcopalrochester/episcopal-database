<?php

function supply_clergy_menu() {
  $items = array();
  $items['supply'] = array(
    'title' => 'Clergy Supply',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supply_clergy_calendar_form'),
    'access arguments' => array('supply clergy'),
    'weight' => 0,
  );
  $items['supply/calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supply_clergy_calendar_form'),
    'access arguments' => array('supply clergy'),
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['supply/roster'] = array(
    'title' => 'Duty Roster',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supply_clergy_roster_form'),
    'access arguments' => array('supply clergy'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  ); 
 $items['supply/list'] = array(
    'title' => 'List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supply_clergy_list_form'),
    'access arguments' => array('supply clergy'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  ); 
  $items['supply/%/%/%'] = array(
    'title' => 'Supply Date',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supply_clergy_date_form',1,2,3),
    'access arguments' => array('supply clergy'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['supply/%/%/%/book/%node'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supply_clergy_book_form',1,2,3,5),
    'access arguments' => array('supply clergy'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['supply/edit/%supply'] = array(
    'title' => 'Edit Clergy Supply Booking',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supply_clergy_edit_form',2),
    'access callback' => 'supply_clergy_booking_access',
    'access arguments' => array(2),
    'weight' => 0,
    'type' => MENU_CALLBACK,
  );
  $items['supply/cancel/%supply'] = array(
    'title' => 'Cancel Clergy Supply Booking',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supply_clergy_cancel_form',2),
    'access callback' => 'supply_clergy_booking_access',
    'access arguments' => array(2),
    'weight' => 0,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function supply_clergy_cancel_form($form,&$form_state,$booking) {
   $date = new DateTime($booking->date);
  $notice ="<span style='font-size: 24px'><strong>NOTE:</strong><br />";
  $notice .= "You <em>must</em> contact this person directly to confirm 
    cancellation.</span><br />";
  $person = node_load($booking->cid);
  $notice .= "<br /><strong>Contact Info:</strong><br />";
  $phone =  _get_value($person,"field_person_phone_pref");
  if ($phone) {
    $notice .= "Phone: ".$phone."<br />";
  }
  $email =  _get_value($person,"field_person_email_pref");
  if ($email) {
    $notice .= "Email: ".l($email,"mailto:$email")."<br />";
  }
  $notes =  _get_value($person,"field_person_supply_notes");
  if ($notes) {
    $notice .="<br /><strong>Notes from this person:</strong><br />";
    $notice .= _get_value($person,"field_person_supply_notes");
  }
  $form['notice'] = array(
    '#type' => 'item',
    '#markup' => $notice,
    );
  $form['date'] = array(
    '#type' => 'item',
    '#title' => 'Date:',
    '#markup' => date_format($date,"l, F j, Y"),
    );
  $parishes = parish_fetch_parishes();
  $parish_options = array('0'=>'No Parish - Mark as Unavailable');
  foreach ($parishes['nodes'] as $parish) {
    $parish_options[$parish->nid] = _get_value($parish,"field_parish_district").
      " District - ".$parish->title;
  }
  $form['parish'] = array(
    '#type' => 'select',
    '#title' => 'REQUIRED - Parish:',
    '#options' => $parish_options,
    '#default_value' => $booking->pid,
    '#disabled' => true,
    );
  $time_array = array();
  $hour = 5;
  while ($hour < 22) { 
    $time_array[date("H:i",strtotime($hour.":00"))] = date("g:i a",strtotime($hour.":00"));
    $time_array[date("H:i",strtotime($hour.":30"))] = date("g:i a",strtotime($hour.":30"));
    $hour += 1;
  }
  $form['time'] = array(
    '#title' => 'RFEQUIRED - Desired Arrival Time',
    '#type' => 'select',
    '#options' => $time_array,
    '#default_value' => date_format($date,"H:i"),
    '#disabled' => true,
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#submit' => array('supply_clergy_cancel_form_submit'),
    '#value' => 'Cancel this booking - I have discussed the cancellation with the above person',
    );
  return $form;
}

function supply_clergy_cancel_form_submit($form,&$form_state) {
  $args = $form_state['build_info']['args'];
  $booking = $args[0];
  $date = new DateTime($booking->date);
  $person = node_load($booking->cid);
  $parish = node_load($booking->pid);
  global $user;
  if ($parish) {
    rules_invoke_event("supply_clergy_cancel",$user,$person,$parish,$booking);
  }
  db_delete("supply_clergy")
    ->condition("bid",$booking->bid)
    ->execute();
  drupal_set_message("Booking canceled.");
  drupal_goto("supply/".date_format($date,"Y/m/d"));
}
 

function supply_clergy_edit_form($form,&$form_state,$booking) {
   $date = new DateTime($booking->date);
  $notice ="<span style='font-size:24px;'><strong>NOTE:</strong><br />";
  $notice .= "You <em>must</em> contact this person directly to confirm 
    the booking. Do not assume you have booked this person for supply
    simply by filling out this form. If they don't check their email or
    this site, they may not even know!</span><br />";
  $person = node_load($booking->cid);
  $notice .= "<br /><strong>Contact Info:</strong><br />";
  $phone =  _get_value($person,"field_person_phone_pref");
  if ($phone) {
    $notice .= "Phone: ".$phone."<br />";
  }
  $email =  _get_value($person,"field_person_email_pref");
  if ($email) {
    $notice .= "Email: ".l($email,"mailto:$email")."<br />";
  }
  $notes =  _get_value($person,"field_person_supply_notes");
  if ($notes) {
    $notice .="<br /><strong>Notes from this person:</strong><br />";
    $notice .= _get_value($person,"field_person_supply_notes");
  }
  $form['notice'] = array(
    '#type' => 'item',
    '#markup' => $notice,
    );
  $form['date'] = array(
    '#type' => 'item',
    '#title' => 'Date:',
    '#markup' => date_format($date,"l, F j, Y"),
    );
  $parishes = parish_fetch_parishes();
  $parish_options = array('0'=>'No Parish - Mark as Unavailable');
  foreach ($parishes['nodes'] as $parish) {
    $parish_options[$parish->nid] = _get_value($parish,"field_parish_district").
      " District - ".$parish->title;
  }
  $form['parish'] = array(
    '#type' => 'select',
    '#title' => 'REQUIRED - Parish:',
    '#options' => $parish_options,
    '#default_value' => $booking->pid,
    );
  $time_array = array();
  $hour = 5;
  while ($hour < 22) { 
    $time_array[date("H:i",strtotime($hour.":00"))] = date("g:i a",strtotime($hour.":00"));
    $time_array[date("H:i",strtotime($hour.":30"))] = date("g:i a",strtotime($hour.":30"));
    $hour += 1;
  }
  $form['time'] = array(
    '#title' => 'RFEQUIRED - Desired Arrival Time',
    '#type' => 'select',
    '#options' => $time_array,
    '#default_value' => date_format($date,"H:i"),
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#submit' => array('supply_clergy_edit_form_submit'),
    '#value' => 'Update this booking - I have discussed the update with the above person',
    );
  return $form;
}

function supply_clergy_edit_form_submit($form,&$form_state) {
  $args = $form_state['build_info']['args'];
  $booking = $args[0];
  $date = explode("T",$booking->date);
  $date = new DateTime($date[0]."T"
    .$form_state['input']['time']);
  $person = node_load($booking->cid);
  global $user;
  $uid = $user->uid;
  $record = array(
    'bid' => $booking->bid,
    'cid' => $person->nid,
    'pid' => $form_state['input']['parish'],
    'date' => date_format($date,'c'),
    'uid' => $uid,
  );
  $name = person_get_title($person)." ".person_get_full_name($person);
  $parish = node_load($form_state['input']['parish']);
  drupal_write_record("supply_clergy",$record,array('bid'));
  if ($parish) {
    drupal_set_message("You have successfully booked $name at ".
      $parish->title." for ".date_format($date,"l, F j, Y, g:i a").".");
  }
  else {
    drupal_set_message("You have successfully marked $name ".
      "unavailable for ".date_format($date,"l, F j, Y, g:i a").".");

  }
  if ($parish) {
    rules_invoke_event("supply_clergy_update",$user,$person,$parish,$record);
  }
  drupal_goto("supply/".date_format($date,"Y/m/d"));
}

function supply_clergy_book_form($form,&$form_state,$year,$month,$day,$person) {
  drupal_set_title("Booking ".person_get_title($person)." ".person_get_full_name($person));
    $date = new DateTime("$month/$day/$year");
  $notice ="<span style='font-size: 24px;'><strong>NOTE:</strong><br />";
  $notice .= "You <em>must</em> contact this person directly to confirm 
    the booking. Do not assume you have booked this person for supply
    simply by filling out this form. If they don't check their email or
    this site, they may not even know!</span><br />";
  $notice .= "<br /><strong>Contact Info:</strong><br />";
  $phone =  _get_value($person,"field_person_phone_pref");
  if ($phone) {
    $notice .= "Phone: ".$phone."<br />";
  }
  $email =  _get_value($person,"field_person_email_pref");
  if ($email) {
    $notice .= "Email: ".l($email,"mailto:$email")."<br />";
  }
  $notes =  _get_value($person,"field_person_supply_notes");
  if ($notes) {
    $notice .="<br /><strong>Notes from this person:</strong><br />";
    $notice .= _get_value($person,"field_person_supply_notes");
  }
  $form['notice'] = array(
    '#type' => 'item',
    '#markup' => $notice,
    );
  $form['date'] = array(
    '#type' => 'item',
    '#title' => 'Date:',
    '#markup' => date_format($date,"l, F j, Y"),
    );
  $parishes = parish_fetch_parishes();
  $parish_options = array('0'=>'No Parish - Mark as Unavailable');
  foreach ($parishes['nodes'] as $parish) {
    $parish_options[$parish->nid] = _get_value($parish,"field_parish_district").
      " District - ".$parish->title;
  }
  $form['parish'] = array(
    '#type' => 'select',
    '#title' => 'REQUIRED - Parish:',
    '#options' => $parish_options,
    );
  $time_array = array();
  $hour = 5;
  while ($hour < 22) { 
    $time_array[date("H:i",strtotime($hour.":00"))] = date("g:i a",strtotime($hour.":00"));
    $time_array[date("H:i",strtotime($hour.":30"))] = date("g:i a",strtotime($hour.":30"));
    $hour += 1;
  }
  $form['time'] = array(
    '#title' => 'RFEQUIRED - Desired Arrival Time',
    '#type' => 'select',
    '#options' => $time_array,
    '#default_value' => '08:00',
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#submit' => array('supply_clergy_book_form_submit'),
    '#value' => 'Make this booking - I have discussed it directly with the above person',
    );
  return $form;
}

function supply_clergy_book_form_submit($form,&$form_state) {
  $args = $form_state['build_info']['args'];
  $date = new DateTime($args[0]."-".$args[1]."-".$args[2]."T"
    .$form_state['input']['time']);
  $person = $args[3];
  global $user;
  $uid = $user->uid;
  $record = array(
    'cid' => $person->nid,
    'pid' => $form_state['input']['parish'],
    'date' => date_format($date,'c'),
    'uid' => $uid,
  );
  $name = person_get_title($person)." ".person_get_full_name($person);
  $parish = node_load($form_state['input']['parish']);
  drupal_write_record("supply_clergy",$record);
  if ($parish) {
    drupal_set_message("You have successfully booked $name at ".
      $parish->title." for ".date_format($date,"l, F j, Y, g:i a")."."); 
    rules_invoke_event("supply_clergy_booked",$user,$person,$parish,$record);
  }
  else {
    drupal_set_message("You have successfully marked $name ".
      "unavailable for ".date_format($date,"l, F j, Y, g:i a")."."); 
  }
  drupal_goto("supply/".$args[0]."/".$args[1]."/".$args[2]);
}

function supply_clergy_permission() {
  return array(
    'supply clergy' => array(
      'title' => t("Use Clergy Supply System"),
      'description' => t("Allow users to access Clergy Supply system"),
    ),
  );
}

function supply_clergy_booking_access($booking) {
  global $user;
  $person = node_load($booking->cid);
  $uid = user_generator_check_mail($person->field_person_email_pref['und'][0]['value']);
  if ($user->uid == $booking->uid ||
    in_array("database editor",$user->roles) ||
    in_array("administrator",$user->roles) ||
    $person->uid == $user->uid ||
    $uid == $user->uid ||
    $user->uid == 1
  ) {
    return true;
  }
  return false;
}

function supply_clergy_date_form($form,&$form_state,$year,$month,$day) {
  $date = new DateTime("$month/$day/$year");
  $he_table = array(
    'header' => array('Name','Location','E-Mail','Phone','Book'),
    'rows' => array(),
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => FALSE,
    'empty' => '',
  );
  $mp_table = $he_table;
  $no_table = $he_table;
  $no_table['header'] = array('Name','Location','Time','Edit','Cancel');
  drupal_set_title("Clergy Supply on ".date_format($date,'l, F j, Y'));
  $he = supply_clergy_find('he');
  if ($he) {
    foreach ($he as $person) {
      $bid = supply_clergy_is_booked($person->nid,$date);
      if (!$bid) {
        $name = person_get_title($person)." ".person_get_full_name($person);
        $notes = _get_value($person,"field_person_supply_notes");
        if ($notes) {
          $name .= "<br /><em>($notes)</em>";
        }
        $home = person_get_address($person,"home");
        $email = person_get_email($person,"pref");
        $phone = person_get_phone($person,"pref");
        $he_table['rows'][] = array(
          $name,
          $home['city'],
          l($email['addy'],"mailto:".$email['addy']),
          $phone['number'],
          l("Book","supply/$year/$month/$day/book/".$person->nid),
        );
      }
      else {
        $booking = supply_load($bid);
        if ($booking->pid) {
          $location = node_load($booking->pid)->title;
        }
        else {
          $location = "Unavailable";
        }
        $edit = "";
        if (supply_clergy_booking_access($booking)) {
          $edit = l("edit","supply/edit/".$booking->bid);
        }
        $cancel = "";
        if (supply_clergy_booking_access($booking)) {
          $cancel = l("cancel","supply/cancel/".$booking->bid);
        }
        if (date("Hi",strtotime($booking->date)) == "0000") {
          $time = "-";
        }
        else {
          $time = date("g:i a",strtotime($booking->date));
        }
        $no_table['rows'][] = array(
          person_get_title($person)." ".person_get_full_name($person),
          $location,
          $time,
          $edit,
          $cancel,
        );
      }
    }
    $form['he_yes'] = array(
      '#type' => 'item',
      '#title' => 'Available for Holy Eucharist (1 or 2)',
      '#markup' => theme_table($he_table),
    );
  }
  $mp = supply_clergy_find('mp');
  if ($mp) {
    foreach ($mp as $person) {
      $bid = supply_clergy_is_booked($person->nid,$date);
      if (!$bid) {
        $name = person_get_title($person)." ".person_get_full_name($person);
        $notes = _get_value($person,"field_person_supply_notes");
        if ($notes) {
          $name .= "<br /><em>($notes)</em>";
        } 
        $home = person_get_address($person,"home");
        $email = person_get_email($person,"pref");
        $phone = person_get_phone($person,"pref");
        $mp_table['rows'][] = array(
          $name,
          $home['city'],
          l($email['addy'],"mailto:".$email['addy']),
          $phone['number'],
          l("Book","supply/$year/$month/$day/book/".$person->nid),
        );
      }
      else {
        $booking = supply_load($bid);
        if ($booking->pid) {
          $location = node_load($booking->pid)->title;
        }
        else {
          $location = "Unavailable";
        }
        $edit = "";
        if (supply_clergy_booking_access($booking)) {
          $edit = l("edit","supply/edit/".$booking->bid);
        }

        $cancel = "";
        if (supply_clergy_booking_access($booking)) {
          $cancel = l("cancel","supply/cancel/".$booking->bid);
        }
        $no_table['rows'][] = array(
          person_get_title($person)." ".person_get_full_name($person),
          $location,
          date("g:i a",strtotime($booking->date)),
          $edit,
          $cancel,
        );
      }
    }
    $form['mp_yes'] = array(
      '#type' => 'item',
      '#title' => 'Available for Morning Prayer (1 or 2)',
      '#markup' => theme_table($mp_table),
    );
  }
  if (count($no_table['rows'])) {
    $form['no'] = array(
      '#type' => 'item',
      '#title' => 'Not available for this date',
      '#markup' => theme_table($no_table),
    );
  }
  return $form;
}

function supply_clergy_find($type = "he") {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type','node')
    ->entityCondition('bundle','person')
    ->propertyCondition('status',1)
    ->fieldCondition('field_person_supply_'.$type,'value',1)
    ->fieldOrderBy('field_person_last_name','value','ASC')
    ->fieldOrderBy('field_person_first_name','value','ASC')
    ->execute();
  if (isset($result['node'])) {
    $nodes = array();
    foreach (array_keys($result['node']) as $nid) {
      $person = node_load($nid);
      if ($person->is_alive) {
        $nodes[] = $person;
      }
    }
    return $nodes;
  }
  return false;
}

function supply_clergy_is_booked($cid,$date) {
  $query = db_select("supply_clergy","s")
    ->fields("s",array("bid"))
    ->condition('s.cid',$cid)
    ->condition('s.date',date_format($date,"Y-m-d")."%","LIKE");
  $result = $query->execute();
  while ($record = $result->fetchObject()) {
    return $record->bid;  
  }
  return false;
}

function supply_clergy_calendar_form($form,&$form_state) {
  drupal_set_title("Clergy Supply: Booking Calendar");
  $date = 0;
  while ($date < 7) {
  $form['calendar_'.$date] = array(
    '#type' => 'item',
    '#markup' => supply_clergy_build_calendar(
      date("m",strtotime("+$date month")),
      date("Y",strtotime("+$date month"))
    ),
  );
  $date++;
  }
 return $form;
}

function supply_clergy_roster_form($form,&$form_state) {
  drupal_set_title("Clergy Supply: Duty Roster");
  $now = date("Y-m-d");
  $bookings = db_select("supply_clergy","s")
    ->fields("s",array("bid","cid","pid","date","uid"))
    ->condition("s.date",$now,">")
    ->condition("s.pid","","!=")
    ->orderBy("s.date","ASC")
    ->execute();
  while ($booking = $bookings->fetchObject()) {
    $date = explode("T",$booking->date);
    if (!isset($form[$date[0]])) {
      $form[$date[0]] = array(
        '#type' => 'fieldset',
        '#title' => $date[0]
      );
      $form[$date[0]]['list'] = array(
        '#type' => 'item',
        '#prefix' => '<ul>',
        '#suffix' => '</ul>',
        );
    }
    $person = node_load($booking->cid);
    if ($booking->pid) {
      $parish = node_load($booking->pid)->title;
    }
    else {
      $parish = "Marked as unavailable";
    }
    if (date("Hi",strtotime($booking->date)) == "0000") {
      $markup ="";
    }
    else {
      $markup = date("h:i a",strtotime($booking->date)).", ";
    }
    $markup .=
      person_get_title($person)." ".
      person_get_full_name($person).", ".
      $parish;
    if (supply_clergy_booking_access($booking)) {
      $markup .= ", ".l("edit","supply/edit/".$booking->bid);
      $markup .= ", ".l("cancel","supply/cancel/".$booking->bid);
    }
    $form[$date[0]]['list'][$booking->date.$booking->bid] = array(
      '#type' => 'item',
      '#prefix' => '<li>',
      '#suffix' => '</li>',
      '#markup' => $markup);
  }
  return $form;
}

function supply_clergy_list_form($form,&$form_state) {
  drupal_set_title("Clergy Supply: Personnel List");
  $he = supply_clergy_find('he');
  if ($he) {
    $form['he'] = array(
      '#type' => 'fieldset',
      '#title' => "List of People Offering Holy Eucharist",
    );
    $form['he']['list'] = array(
      '#type' => 'item',
      '#prefix' => '<ul>',
      '#suffix' => '</ul>',
    );
    $count = 0;
    foreach ($he as $person) {
      $markup = person_get_title($person)." ".
        person_get_full_name($person);
      if (edb_is_admin() || node_access("update",$person)) {
        $markup .= " ".l("edit","node/".$person->nid."/edit");
      }
      $notes = _get_value($person,"field_person_supply_notes");
      if ($notes) {
        $markup .= "<ul><li>Notes: $notes</li></ul>";
      }
      $form['he']['list'][$count] = array(
        '#type' => 'item',
        '#prefix' => '<li>',
        '#suffix' => '</li>',
        '#markup' => $markup,
      );
      $count++;
    }
  }
  $mp = supply_clergy_find('mp');
  if ($mp) {
    $form['mp'] = array(
      '#type' => 'fieldset',
      '#title' => "List of People Offering Morning Prayer",
    );
    $form['mp']['list'] = array(
      '#type' => 'item',
      '#prefix' => '<ul>',
      '#suffix' => '</ul>',
    );
    $count = 0;
    foreach ($mp as $person) {
      $markup = person_get_title($person)." ".
        person_get_full_name($person);
      $notes = _get_value($person,"field_person_supply_notes");
      if ($notes) {
        $markup .= "<ul><li>Notes: $notes</li></ul>";
      }
      $form['mp']['list'][$count] = array(
        '#type' => 'item',
        '#prefix' => '<li>',
        '#suffix' => '</li>',
        '#markup' => $markup,
      );
      $count++;
    }
  }
  return $form;

}

function supply_load($bid) {
    $query = db_select("supply_clergy","s")
      ->fields("s",array("bid","cid","pid","date","uid"))
      ->condition('s.bid',$bid);
    $result = $query->execute();
    while ($record = $result->fetchObject()) {
      return $record;
    }
    return false;
}

function supply_clergy_build_calendar($month,$year) {

  // Create array containing abbreviations of days of week.
  $daysOfWeek = array('Su','Mo','Tu','Wd','Th','Fr','Sa');

  // What is the first day of the month in question?
  $firstDayOfMonth = mktime(0,0,0,$month,1,$year);

  // How many days does this month contain?
  $numberDays = date('t',$firstDayOfMonth);

  // Retrieve some information about the first day of the
  // month in question.
  $dateComponents = getdate($firstDayOfMonth);

  // What is the name of the month in question?
  $monthName = $dateComponents['month'];

  // What is the index value (0-6) of the first day of the
  // month in question.
  $dayOfWeek = $dateComponents['wday'];

  // Create the table tag opener and day headers

  $calendar = "<table class='calendar' style='border-left: 1px #ccc solid; width: 100%;'>";
  $calendar .= "<caption style='font-size: 250%; font-weight: bold; line-height: 300%'>$monthName $year</caption>";
  $calendar .= "<tr>";
  
  $cell_style = "font-size: 150%; line-height: 280%; text-align: center; border-right: 1px #ccc solid; border-bottom: 1px #ccc solid;";

  // Create the calendar headers

  foreach($daysOfWeek as $day) {
    $calendar .= "<th class='header' style='$cell_style'>$day</th>";
  } 

  // Create the rest of the calendar

  // Initiate the day counter, starting with the 1st.

  $currentDay = 1;

  $calendar .= "</tr><tr>";

  // The variable $dayOfWeek is used to
  // ensure that the calendar
  // display consists of exactly 7 columns.

  if ($dayOfWeek > 0) { 
    $calendar .= "<td colspan='$dayOfWeek' style='$cell_style'>&nbsp;</td>"; 
  }

  $month = str_pad($month, 2, "0", STR_PAD_LEFT);
  while ($currentDay <= $numberDays) {

    // Seventh column (Saturday) reached. Start a new row.

    if ($dayOfWeek == 7) {

      $dayOfWeek = 0;
      $calendar .= "</tr><tr>";

    }

    $currentDayRel = str_pad($currentDay, 2, "0", STR_PAD_LEFT);

    $date = "$year-$month-$currentDayRel";

    $calendar .= "<td style='$cell_style' class='day' rel='$date'>";
    if ($dayOfWeek === 0) {
      $calendar .= "<div style='background: #eeffee;'><strong><em>";
    }
    if (strtotime($year."/".$month."/".$currentDay) > time()) {   
      $calendar.= l($currentDay,"supply/".$year."/".$month."/".$currentDay);
    }
    else {
      $calendar .= $currentDay;
    }
    if ($dayOfWeek === 0) {
      $calendar .= "</em></strong></div>";
    }
    $calendar .= "</td>";

    // Increment counters

    $currentDay++;
    $dayOfWeek++;

  }



  // Complete the row of the last week in month, if necessary

  if ($dayOfWeek != 7) { 

    $remainingDays = 7 - $dayOfWeek;
    $calendar .= "<td colspan='$remainingDays'>&nbsp;</td>"; 

  }

  $calendar .= "</tr>";

  $calendar .= "</table>";

  return $calendar;

}

// rules

function supply_clergy_rules_event_info() {
  $variables = array(
    'user' => array('type' => 'user', 'label' => t('The user who made the booking')),
    'clergy' => array('type' => 'node', 'label' => t('The clergy who was booked')),
    'parish' => array('type' => 'node', 'label' => t('The parish that was booked')),
    'booking' => array('type' => 'supply', 'label' => t('The booking object')),
    );
  return array(
    'supply_clergy_booked' => array(
      'label' => t('Supply clergy booking is made'),
      'Group' => 'Supply Clergy',
      'variables' => $variables,
    ),
    'supply_clergy_update' => array(
      'label' => t('Supply clergy booking is updated'),
      'Group' => 'Supply Clergy',
      'variables' => $variables,
    ),
    'supply_clergy_cancel' => array(
      'label' => t('Supply clergy booking is cancelled'),
      'Group' => 'Supply Clergy',
      'variables' => $variables,
    ),
  );
}

function supply_clergy_token_info() {
  $types['supply'] = array(
    'name' => t("Booking object"),
    'description' => t("Provides information on the booking"),
  );
  $supply['supply_id'] = array(
    'name' => t("ID"),
    'description' => t("Supply clergy booking id"),
  );
  $supply['supply_date'] = array(
    'name' => t("Date"),
    'description' => t("Supply clergy booking date"),
  );
  return array(
    'types' => $types,
    'tokens' => array(
      'supply' => $supply,
    ),
  );
}

function supply_clergy_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();

  if ($type == 'supply') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
      case 'supply_date':
        if (is_array($data['supply'])) {
        $replacements[$original] = date('m/d/Y H:i a',strtotime($data['supply']['date']));
        }
        else {
        $replacements[$original] = date('m/d/Y H:i a',strtotime($data['supply']->date));
        }
        break;
      case 'supply_id':
        $replacements[$original] = $data['supply']['bid'];
        break;
      }
    }
  }

  return $replacements;
}
